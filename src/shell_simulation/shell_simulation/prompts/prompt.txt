i have a competition i am currently participating in, the problem is that this is my first time so i have little to no experience in the technology and stack used in the competition, i am still learning, this is the competiton details  Shell Eco-marathon Autonomous Programming Competition 2025 The Autonomous Programming Competition, developed in partnership with Southwest Research Institute, is designed to give Shell Eco-marathon Teams the opportunity to apply science, technology, engineering and math (STEM) skills, especially computer programming; to offer them a lower entry-barrier in terms of financial costs; and to challenge them to solve industry-relevant challenges utilising cutting-edge technology. It is a great stepping stone towards the Shell Eco-marathon Autonomous Urban Concept Competition.  The objective of this competition is for Teams to develop and implement path planning, perception, and control algorithms for a simulated autonomous vehicle using the Robot Operating System (ROS) within the CARLA simulator, an open-source platform designed for autonomous driving research. The Team that achieves the highest Energy Efficiency (km/kWh) according to the ranking criteria detailed below will be declared the winner of the competition.  How the competition works At the start of practice and competition, includes the coordinates of the starting point, the number of goal points required to pass, and the maximum run time. The vehicle can pass these goal points in no particular order and must pass them within 3 meters of the published location, leaving it up to the Team to determine the most efficient approach.  Preparation When logged in, the Team will be able to download an example project in the form of Robot Operating System (ROS) packages. These packages will contain source code for ROS nodes, build instructions and general package information, which is meant to demonstrate the process for testing, submitting and getting results for Shell Eco-marathon simulation projects.  The Team can modify and improve the example ROS stack to perform in the real-world simulation environment within CARLA, provided by SwRI. This modification involves the development of path planning, perception, and control algorithms.  How to Participate When the Team's code is ready to be submitted for simulation, they can upload their code on this website. The uploaded submissions will be queued and processed in order of uploading.  The following conditions apply during competition:  Every Team will have a maximum of six attempts (uploaded) in total, with a maximum of one (1) attempt per day, measured by time of upload (days end at 23:59 Greenwich Mean Time (GMT)). Teams have the responsibility to ensure that their code will compile before they upload it. If a submission does not compile, it will still count to the total number of attempts, so thorough testing is crucial. The attempt will end when all goal points are passed, when the maximum simulation time has passed, or when the code fails to compile. The attempt will be considered invalid if the vehicle performs behaviour that would be deemed dangerous or careless in a real-world vehicle. This includes, but is not limited to, driving the vehicle in reverse for an extended period of time, driving against the flow of lane traffic, colliding with obstacles, driving over sidewalks and other non-drivable areas, etc. The competition is using right-hand traffic. An attempt will be deemed as valid when it has passed the required number of goal points within the maximum allowed time. Any attempt which does not pass the required goal points within time, or which fails to compile, will be deemed as invalid. Both valid and invalid attempts will count towards the total number of attempts. After the attempt has completed, the Team will be able to evaluate their performance by downloading the resulting ROS Bag to play back the simulation on their own computer (this play back does not require CARLA, only a ROS installation). If the resulting score of the attempt is higher than the Team's previous attempts, the score will be reflected on the leader board. On the final day of competition (May 28, 2025), the leader board will be taken offline while Teams can still submit their final attempt. On this last day, the time of uploading is what counts; submissions queued before the cut-off time will still be run.  The official final result will be announced once all attempts are validated by the Technical Team.  Competition Scoring Shell Eco-marathon encourages students to solve engineering challenges by building energy-efficient vehicles. Likewise, the Autonomous Programming Competition promotes the development of energy-efficient autonomy algorithms. Each Team with a valid attempt will be ranked based on their achieved Energy Efficiency, expressed in km/kWh.  This metric is calculated by dividing the Distance travelled by the Energy Usage. To achieve a high score, Teams must maximize the distance their vehicle travels while minimizing the energy consumed. Efficient path planning, precise vehicle control, and energy-conscious driving strategies are key to achieving the best results.  Energy Usage refers to the total amount of energy consumed by the vehicle to complete the challenge. Factors such as vehicle speed, acceleration, and manoeuvring are considered. Lower energy usage contributes positively to the overall efficiency score.  Distance is the total distance the vehicle travels during the challenge. Teams that optimize their route and maintain precise control over the vehicle to cover the necessary distance efficiently will enhance their overall score.  Violations such as speeding and crossing lane lines will be closely monitored during each attempt. A percentage penalty for every infraction will be added to the total Energy Usage at the end of the attempt, impacting the final score. Penalties will be calculated and communicated to Teams after review of the attempt.  Teams should focus on optimizing both their energy consumption and travel distance while strictly adhering to driving regulations within the simulated environment to achieve the highest possible Energy Efficiency score.  When a Team submits multiple valid attempts, only their highest Energy Efficient attempt will be considered for classification, meaning if a Team submits a later valid attempt which scores lower, this will not affect their overall standing.  Ties will be broken by order of code submission date, meaning the Team that submitted their code first will win the tie.  Technical Specifications The Team's code is built is executed in a simulation environment operating on the following:  Ubuntu 22.04 (Jammy Jellyfish) CARLA 0.9.15 CARLA ROS Bridge Team code can be developed for: ROS 2 (Humble)  Additional Information Competition Parameters The maximum runtime in simulation for each attempt is set at 10 minutes. There will be 15 goal points, which will be revealed along with the map before the start of the competition.  The first goal point is directly in front of the vehicle, so simply setting the gear to "forward" with the /gear_command topic and increasing the throttle with the /throttle_command topic is enough to reach it. An example of how this can be achieved can be found in the Source Code file (ShellSource.zip) under the Downloads tab, by looking at the shell_simulation.launch file.  Vehicles must drive on the right, and they must adhere to the speed limit of 30 mph (48 km/h). Each violation of these rules will result in a 2% energy penalty, which will be added to the total energy consumed at the end of your attempt.  Vehicles must correctly avoid obstacles (stationary and/or moving cars, sidewalks, curbs, buildings, etc). Collision with objects in the environment will result in a disqualified run and count as an attempt.  The Organiser reserves the discretion to apply additional penalties, including disqualification, for any attempts which have been deemed to intentionally violate the traffic rules to gain an unfair advantage.  Usage Important considerations:  Project submissions are compiled in a fresh Ubuntu Linux 20.04 / ROS Noetic environment. Any software dependencies must be defined properly in the catkin package manifest and will be installed at build time by rosdep. All ROS packages must install themselves when built; the source code will not be present in the simulation environment, only installed targets. All project submissions must have a package named shell_simulation with a launch file named shell_simulation.launch that requires no parameters or arguments in order to run; this is used as the entry point for launching the project. Uploaded projects must be named project.zip and contain only the source code of ROS packages. The simulation will automatically end after either all goals have been reached or after it has been running for 10 minutes.  The green dot on the map is the startion point (280.363739, -129.306351, 0.101746) and the red dots indicate all possible waypoints. For the competition, the fourteen target waypoints are as follows:  [[[334.949799,-161.106171,0.001736], [339.100037,-258.568939,0.001679], [396.295319,-183.195740,0.001678], [267.657074,-1.983160,0.001678], [153.868896,-26.115866,0.001678], [290.515564,-56.175072,0.001677], [92.325722,-86.063644,0.001677], [88.384346,-287.468567,0.001728], [177.594101,-326.386902,0.001677], [-1.646942,-197.501282,0.001555], [59.701321,-1.970804,0.001467], [122.100121,-55.142044,0.001596], [161.030975,-129.313187,0.001679], [184.758713,-199.424271,0.001680]] The following ROS topics are available within the simulation:  Published topics:  /carla/ego_vehicle/collision [carla_msgs/CarlaCollisionEvent]  /carla/ego_vehicle/depth_middle/image [sensor_msgs/Image]  /carla/ego_vehicle/depth_middle/camera_info [sensor_msgs/CameraInfo]  /carla/ego_vehicle/gnss [sensor_msgs/NavSatFix]  /carla/ego_vehicle/imu [sensor_msgs/Imu]  /carla/ego_vehicle/lane_invasion [carla_msgs/CarlaLaneInvasionEvent]  /carla/ego_vehicle/odometry [nav_msgs/Odometry]  /carla/ego_vehicle/rgb_front/image/compressed [sensor_msgs/CompressedImage]  /carla/ego_vehicle/speedometer [std_msgs/Float32]  /carla/ego_vehicle/vehicle_status [carla_msgs/CarlaEgoVehicleStatus]  /carla/ego_vehicle/vlp16_1 [sensor_msgs/PointCloud2]  /clock [rosgraph_msgs/Clock]  /rosout [rosgraph_msgs/Log]  /rosout_agg [rosgraph_msgs/Log]  /tf [tf2_msgs/TFMessage]  These topics have data from sensors that can be used to observe the environment:  /carla/ego_vehicle/depth_middle/image [sensor_msgs/Image]  /carla/ego_vehicle/depth_middle/camera_info [sensor_msgs/CameraInfo]  /carla/ego_vehicle/gnss [sensor_msgs/NavSatFix]  /carla/ego_vehicle/lane_invasion [carla_msgs/CarlaLaneInvasionEvent]  /carla/ego_vehicle/imu [sensor_msgs/Imu]  /carla/ego_vehicle/odometry [nav_msgs/Odometry]  /carla/ego_vehicle/rgb_front/image/compressed [sensor_msgs/CompressedImage]  /carla/ego_vehicle/vlp16_1 [sensor_msgs/PointCloud2]  And messages can be published to this topic to control the vehicle:   /brake_command [std_msgs/Float64]    Valid values range from 0.0 (no brake) to 1.0 (full brake)   /gear_command [std_msgs/String]    Valid values are "forward" or "reverse"   /handbrake_command [std_msgs/Bool]    If set to "true", throttle will be ignored   /steering_command [std_msgs/Float64]    Valid values range from -1.0 (full left) to 1.0 (full right)   /throttle_command [std_msgs/Float64]    Valid values range from 0.0 (no throttle) to 1.0 (full throttle)


